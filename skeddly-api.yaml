swagger: '2.0'

# This is your document metadata
info:
  version: "0.0.4"
  title: Skeddly API
  contact:
    name: Skeddly Support
    url: https://app.skeddly.com/Support
    email: support@skeddly.com

# the domain of the service
host: api.skeddly.com

# array of all schemes that your API supports
schemes:
  - https

# will be prefixed to all paths
basePath: /api

produces:
  - application/json
  
consumes:
  - application/json

security:
  - accessKeyAuth: []
  
securityDefinitions:
  accessKeyAuth:
    type: apiKey
    in: header
    name: Authorization
    
paths:

  # Actions
  /Actions:
    get:
      description: |
        Retrieves the list of actions.
      
      tags:
        - actions
      
      security:
        - accessKeyAuth: []
        
        # This is array of GET operation parameters:
      parameters:
        - name: include
          in: query
          description: List of extra data to include in the results 
          required: false
          type: string
          format: comma-seperated list
        - name: filter.actionTypes
          in: query
          description: List of action types. 
          required: false
          type: string
          format: comma-seperated list
        - name: filter.credentialIds
          in: query
          description: List of credential IDs.
          required: false
          type: string
          format: comma-seperated list
        - name: filter.isEnabled
          in: query
          description: True or False.
          required: false
          type: boolean

      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            title: ListActionsResponse
            type: array
            items:
              $ref: '#/definitions/Action'
  
  # Managed Instance Groups
  /ManagedInstanceGroups:
    get:
      description: |
        Retrieves the list of Managed Instance Groups.
      
      tags:
        - managed-instances
      
      security:
        - accessKeyAuth: []
        
        # This is array of GET operation parameters:
      parameters:
        - name: include
          in: query
          description: List of extra data to include in the results 
          required: false
          type: string
          format: comma-seperated list

      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          schema:
            title: ListManagedInstanceGroupsResponse
            type: array
            items:
              $ref: '#/definitions/ManagedInstanceGroup'
    post:
      description: |
        Creates a new Managed Instance Group.
        
      tags:
        - managed-instances
      
      security:
        - accessKeyAuth: []
        
      parameters:
        - name: body
          in: body
          description: Managed Instance Group to be created.
          required: true
          schema:
            $ref: '#/definitions/CreateManagedInstanceGroup'
          
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/ManagedInstanceGroup'
            
  /ManagedInstanceGroups/{id}: 
    get:
      description: |
        Retrieves an existing Managed Instance Group.
        
      tags:
        - managed-instances
      
      security:
        - accessKeyAuth: []
        
      parameters:
        - name: id
          in: path
          description: ID of the existing Managed Instance Group to be retrieved.
          required: true
          type: string
        - name: include
          in: query
          description: List of extra data to include in the results 
          required: false
          type: string
          format: comma-seperated list
          
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/ManagedInstanceGroup'
            
    put:
      description: |
        Updates an existing Managed Instance Group.
        
      tags:
        - managed-instances
      
      security:
        - accessKeyAuth: []
        
      parameters:
        - name: id
          in: path
          description: ID of the existing Managed Instance Group to be updated.
          required: true
          type: string
        - name: body
          in: body
          description: Managed Instance Group to be created.
          required: true
          schema:
            $ref: '#/definitions/UpdateManagedInstanceGroup'
          
      responses:
        200:
          description: Successful response
          schema:
            $ref: '#/definitions/ManagedInstanceGroup'
  
  /ManagedPolicies:
    get:
      description: |
        Retrieves the list of available managed policies.
      
      tags:
        - users
      
      security:
        - accessKeyAuth: []
        
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            title: ListManagedPoliciesResponse
            type: array
            items:
              $ref: '#/definitions/ManagedPolicy'
  
  /ManagedPolicies/{id}:
    get:
      description: |
        Retrieves information about a single managed policy.
      
      tags:
        - users
      
      security:
        - accessKeyAuth: []
        
      # This is array of GET operation parameters:
      parameters:
        - name: id
          in: path
          description: ID of the managed policy to be retrieved.
          required: true
          type: string    
        
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/ManagedPolicy'
            
  /ManagedPolicies/{id}/PolicyDocument:
    get:
      description: |
        Retrieves the policy document for a single managed policy.
      
      tags:
        - users
      
      security:
        - accessKeyAuth: []
        
      # This is array of GET operation parameters:
      parameters:
        - name: id
          in: path
          description: ID of the managed policy.
          required: true
          type: string    
        
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            type: string
            
  /TimeZones:
    get:
      description: |
        Retrieves the list of available time zones.
      
      tags:
        - actions
      
      security:
        - accessKeyAuth: []
        
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            title: ListTimeZonesResponse
            type: array
            items:
              $ref: '#/definitions/TimeZone'
              
  /TimeZones/{id}:
    get:
      description: |
        Retrieves information about a single time zone.
      
      tags:
        - actions
      
      security:
        - accessKeyAuth: []
        
      # This is array of GET operation parameters:
      parameters:
        - name: id
          in: path
          description: ID of the time zone to be retrieved.
          required: true
          type: string    
        
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/TimeZone'
            
  /Users:
    get:
      description: |
        Retrieves the list of users configured in the account.
      
      tags:
        - users
      
      security:
        - accessKeyAuth: []
      
      parameters:
        - name: include
          in: query
          description: List of extra data to include in the results 
          required: false
          type: string
          format: comma-seperated list
          
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            title: ListUsersResponse
            type: array
            items:
              $ref: '#/definitions/User'
              
    post:
      description: |
        Creates a new user.
      
      tags:
        - users
      
      security:
        - accessKeyAuth: []
        
      # This is array of GET operation parameters:
      parameters:
        - name: body
          in: body
          description: Payload for the create user command
          required: true
          schema:
            $ref: '#/definitions/CreateUser'
        
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/User'
            
  /Users/{id}:
    get:
      description: |
        Retrieves information about a single user.
      
      tags:
        - users
      
      security:
        - accessKeyAuth: []
        
      # This is array of GET operation parameters:
      parameters:
        - name: id
          in: path
          description: ID of the user to be retrieved.
          required: true
          type: string    
        - name: include
          in: query
          description: List of extra data to include in the results 
          required: false
          type: string
          format: comma-seperated list
          
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/User'
    
    put:
      description: |
        Changes a user's properties.
      
      tags:
        - users
      
      security:
        - accessKeyAuth: []
        
      # This is array of GET operation parameters:
      parameters:
        - name: id
          in: path
          description: ID of the user to be modified.
          required: true
          type: string
        - name: body
          in: body
          description: Payload for the modify user command
          required: true
          schema:
            $ref: '#/definitions/ModifyUser'
        
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/User'
            
  /Users/{id}/Password:
    put:
      description: |
        Changes a user's password.
      
      tags:
        - users
      
      security:
        - accessKeyAuth: []
        
      # This is array of GET operation parameters:
      parameters:
        - name: id
          in: path
          description: ID of the user to be retrieved.
          required: true
          type: string
        - name: body
          in: body
          description: Payload for the change password command
          required: true
          schema:
            $ref: '#/definitions/ModifyUserPassword'
        
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response
          
  /Users/{id}/RemoveMfa:
    put:
      description: |
        Removes a user's MFA device information.
      
      tags:
        - users
      
      security:
        - accessKeyAuth: []
        
      # This is array of GET operation parameters:
      parameters:
        - name: id
          in: path
          description: ID of the user whose MFA device information should be removed.
          required: true
          type: string
        - name: body
          in: body
          description: Payload for the remove MFA request
          required: true
          schema:
            $ref: '#/definitions/RemoveUserMfa'
        
      # Expected responses for this operation:
      responses:
        # Response code
        200:
          description: Successful response     
          # A schema describing your response object.
          # Use JSON Schema format
          schema:
            $ref: '#/definitions/User'
            
definitions:

  # An Action
  Action:
    type: object
    required:
      - actionId
      - actionType
      - actionVersionId
      - credentialId
      - isEnabled
      - lastModifiedBy
      - lastModifiedDate
      - name
      - regionName
    properties:
      actionId:
        type: string
      actionType:
        type: string
      actionVersionId:
        type: string
      credentialId:
        type: string
      isEnabled:
        type: boolean
      lastModifiedBy:
        type: string
      lastModifiedDate:
        type: string
        format: date-time
      name:
        type: string
      regionName:
        type: string
  
  CreateManagedInstanceGroup:
    type: object
    required:
      - name
      - timeZoneId
    properties:
      backupParameters:
        $ref: '#/definitions/ManagedInstanceBackupParameters'
      deleteBackupsParameters:
        $ref: '#/definitions/ManagedInstanceDeleteBackupsParameters'
      name:
        type: string
        maxLength: 255
      startStopParameters:
        $ref: '#/definitions/ManagedInstanceStartStopParameters'
      timeZoneId:
        type: string
  
  CreateUser:
    type: object
    required:
      - emailAddress
      - password
      - username
    properties:
      emailAddress:
        type: string
        description: New email address for the user.
      password:
        type: string
      username:
        type: string
        description: Username for the new user.
          
  DailyScheduleParameters:
    type: object
    description: Parameters for a 'daily' schedule.
    allOf:
      - $ref: '#/definitions/ScheduleParameters'
      -
        properties:
          days:
            type: array
            description: Days of the week on which to execute.
            items:
              type: string
              enum:
                - sunday
                - monday
                - tuesday
                - wednesday
                - thursday
                - friday
                - saturday
        
  HourlyScheduleParameters:
    type: object
    description: Parameters for a 'hourly' schedule.
    allOf:
      - $ref: '#/definitions/ScheduleParameters'
      -
        properties:
          hours:
            type: array
            description: Hours of the day at which to execute.
            items:
              type: integer
              format: int32
              minimum: 0
              maximum: 23
             
  ManagedInstanceBackupParameters:
    type: object
    required:
      - schedule
      - backupName
      - tags
    properties:
      schedule:
        $ref: '#/definitions/ManagedInstanceSchedule'
      backupName:
        type: string
        description: Name of the backup to be created.
        maxLength: 255
      tags:
        type: array
        description: Resource tags to add to the backups.
        items:
          $ref: '#/definitions/Tag'
  
  ManagedInstanceDeleteBackupsParameters:
    type: object
    required:
      - schedule
      - olderThanDays
      - minimumToKeep
      - isPerVolume
    properties:
      schedule:
        $ref: '#/definitions/ManagedInstanceSchedule'
      isPerVolume:
        type: boolean
      minimumToKeep:
        type: integer
        format: int32
        description: Minimum number of backups to preserve.
        minimum: 0
        maximum: 100
      olderThanDays:
        type: integer
        format: int32
        description: Minimum age for a backup to be deleted.
        minimum: 1
        maximum: 1000
          
  # A Managed Instance Group    
  ManagedInstanceGroup:
    type: object
    required:
      - createdDate
      - managedInstanceGroupId
      - lastModifiedBy
      - name
      - timeZoneId
    properties:
      backupParameters:
        $ref: '#/definitions/ManagedInstanceBackupParameters'
      createdDate:
        type: string
        format: date-time
      deleteBackupsParameters:
        $ref: '#/definitions/ManagedInstanceDeleteBackupsParameters'
      isBackupInstance:
        type: boolean
      isDeleteBackups:
        type: boolean
      isStartInstance:
        type: boolean
      managedInstanceGroupId:
        type: string
      lastModifiedBy:
        type: string
        format: date-time
      name:
        type: string
        maxLength: 255
      startStopParameters:
        $ref: '#/definitions/ManagedInstanceStartStopParameters'
      timeZoneId:
        type: string
  
  ManagedInstanceSchedule:
    type: object
    description: Schedule for a Managed Instance or a Managed Instance Group.
    required:
      - scheduleType
      - timeOfDay
      - parameters
    properties:
      parameters:
        $ref: '#/definitions/ScheduleParameters'
      scheduleType:
        type: string
        description: Type of schedule.
        enum:
          - hourly
          - daily
          - monthly
      timeOfDay:
        type: string
        description: Time of day to execute the schedule.
          Local to the time zone of the Managed Instance or Managed Instance Group. Format is 24-hour, 'hh:mm:ss'.
        pattern: '[0-2][0-9]:[0-5][0-9]:[0-5][0-9]'
  
  ManagedInstanceStartStopParameters:
    type: object
    required:
      - schedule
      - stopTimeInSeconds
    properties:
      schedule:
        $ref: '#/definitions/ManagedInstanceSchedule'
      stopTimeInSeconds:
        type: integer
        description: Length of time (in seconds) after the instance was
          started to stop the instance.
        format: int32
        minimum: 1
        maximum: 86400
  
  ManagedPolicy:
    type: object
    description: A managed policy.
    required:
      - managedPolicyId
      - name
    properties:
      managedPolicyId:
        type: string
      name:
        type: string
        
  ModifyUser:
    type: object
    properties:
      emailAddress:
        type: string
        description: New email address for the user.
      status:
        type: string
        description: New status for the user.
        enum:
          - disabled
          - enabled
     
  ModifyUserPassword:
    type: object
    required:
      - password
    properties:
      password:
        type: string
        description: New password for the user
        
  MonthlyScheduleParameters:
    type: object
    description: Parameters for a 'monthly' schedule.
    allOf:
      - $ref: '#/definitions/ScheduleParameters'
      -
        required:
          - dayOfMonth
        properties:
          dayOfMonth:
            type: string
            enum:
              - indicate-day-and-week
              - last-day
              - same-day-as-start
          months:
            type: array
            description: Months of the year in which to execute.
            items:
              type: string
              enum:
                - january
                - february
                - march
                - april
                - may
                - june
                - july
                - august
                - september
                - october
                - november
                - december
          weekAndDay:
            $ref: '#/definitions/WeekAndDay'
                
  NoneScheduleParameters:
    type: object
    allOf:
      - $ref: '#/definitions/ScheduleParameters'
  
  RemoveUserMfa:
    type: object
    required:
      - mfaType
    properties:
      mfaType:
        type: string
        description: Type of MFA to delete.
        enum:
          - mobile-otp
          - google-auth
          
  ScheduleParameters:
    type: object
    
  Tag:
    type: object
    description: A resource tag.
    required:
      - name
    properties:
      name:
        type: string
        maxLength: 255
      value:
        type: string
        maxLength: 255

  TimeZone:
    type: object
    description: A time zone.
    required:
      - displayName
      - timeZoneId
    properties:
      displayName:
        type: string
      timeZoneId:
        type: string
        
  UpdateManagedInstanceGroup:
    type: object
    required:
      - name
      - timeZoneId
    properties:
      backupParameters:
        $ref: '#/definitions/ManagedInstanceBackupParameters'
      deleteBackupsParameters:
        $ref: '#/definitions/ManagedInstanceDeleteBackupsParameters'
      name:
        type: string
        maxLength: 255
      startStopParameters:
        $ref: '#/definitions/ManagedInstanceStartStopParameters'
      timeZoneId:
        type: string
  
  User:
    type: object
    description: A user.
    required:
      - userId
      - username
      - emailAddress
      - status
      - lastAccessDate
      - mfaType
    properties:
      emailAddress:
        type: string
      lastAccessDate:
        type: string
      managedPolicies:
        type: array
        items:
          $ref: '#/definitions/ManagedPolicy'
      mfaType:
        type: string
        enum:
          - none
          - mobile-otp
          - google-auth
      status:
        type: string
        enum:
          - enabled
          - disabled
          - deleted
      userId:
        type: string
      username:
        type: string
        
  WeekAndDay:
    type: object
    required:
      - day
      - week
    properties:
      week:
        type: string
        enum:
          - first
          - second
          - third
          - fourth
          - last
      day:
        type: string
        enum:
          - sunday
          - monday
          - tuesday
          - wednesday
          - thursday
          - friday
          - saturday 

  WeeklyScheduleParameters:
    type: object
    allOf:
      - $ref: '#/definitions/ScheduleParameters'
      -
        required:
          - dayOfWeek
        properties:
          dayOfWeek:
            type: string
            enum:
              - same-day-as-start
      
# End of file
